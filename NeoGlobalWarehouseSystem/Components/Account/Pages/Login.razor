@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<style>
    .login-bg {
        min-height: calc(100vh - 64px);
        background: #f7f7f7; /* slight gray */
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .login-card {
        border-radius: 16px;
        box-shadow: 0 4px 24px rgba(44, 62, 80, 0.10);
        padding: 0 2.5rem 2.5rem 2.5rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        background: #fff;
        margin: 2rem 0;
    }
    .login-logo {
        width: 120px;
        height: 120px;
        margin-top: 2rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #fff; /* white background for logo */
    }
    .login-title {
        font-size: 2.2rem;
        font-weight: 700;
        color: #2E4394;
        margin-bottom: 0.5rem;
        text-align: center;
        letter-spacing: 1px;
    }
    .login-subtitle {
        color: #888;
        font-size: 1.08rem;
        margin-bottom: 2rem;
        text-align: center;
    }
    .login-input-group {
        position: relative;
        width: 100%;
        margin-bottom: 1.2rem;
    }
    .login-input-icon {
        position: absolute;
        left: 16px;
        top: 50%;
        transform: translateY(-50%);
        color: #b0b8d1;
        font-size: 1.1rem;
        pointer-events: none;
    }
    .login-input {
        width: 100%;
        border-radius: 6px;
        border: 1px solid #d1d5db;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        font-size: 1rem;
        background: #f5f8ff;
        transition: border-color 0.2s, background 0.2s;
        box-sizing: border-box;
    }
    .login-input:focus {
        border-color: #2E4394;
        outline: none;
        background: #fff;
    }
    .login-btn {
        width: 100%;
        background: #2E4394;
        color: #fff;
        font-weight: 600;
        font-size: 1.08rem;
        border-radius: 6px;
        margin-top: 0.5rem;
        border: none;
        padding: 0.85rem 0;
        box-shadow: 0 2px 8px rgba(44, 62, 80, 0.08);
        transition: background 0.2s, box-shadow 0.2s;
    }
    .login-btn:hover {
        background: #1d2c6b;
        box-shadow: 0 4px 16px rgba(44, 62, 80, 0.13);
    }
    .login-checkbox {
        margin-bottom: 1.2rem;
        display: flex;
        align-items: center;
        width: 100%;
        font-size: 0.98rem;
    }
    .login-checkbox input[type="checkbox"] {
        accent-color: #2E4394;
        width: 18px;
        height: 18px;
    }
    .login-checkbox label {
        margin-left: 0.5rem;
        color: #444;
        user-select: none;
    }
    .login-validation {
        width: 100%;
        margin-bottom: 0.5rem;
        font-size: 0.97rem;
    }
    .login-divider {
        width: 100%;
        height: 1px;
        background: #f0f0f0;
        margin: 2rem 0 1rem 0;
        border: none;
    }
    .login-links {
        margin-top: 0.5rem;
        text-align: center;
        width: 100%;
        display: flex;
        flex-direction: column;
        gap: 0.3rem;
    }
    .login-links a {
        color: #2E4394;
        text-decoration: none;
        font-size: 0.98rem;
        transition: color 0.2s;
    }
    .login-links a:hover {
        color: #1d2c6b;
        text-decoration: underline;
    }
</style>

<div class="login-bg">
    <div class="login-card">
        <div class="login-logo">
            <img src="/images/logo.png" alt="Logo" style="width:200px; padding: 20px;" />
        </div>
        <div class="login-title">Log in</div>
        <div class="login-subtitle">Sign in to your account</div>
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger login-validation" role="alert" />
            <div class="login-input-group">
                <span class="login-input-icon">
                    <svg width="18" height="18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M9 9a3 3 0 100-6 3 3 0 000 6zM2.25 15.75a6.75 6.75 0 1113.5 0v.25a.75.75 0 01-.75.75H3a.75.75 0 01-.75-.75v-.25z" stroke="#b0b8d1" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"/></svg>
                </span>
                <InputText @bind-Value="Input.Email" class="login-input" style="width:280px" autocomplete="username" aria-required="true" placeholder="Email" />
            </div>
            <ValidationMessage For="() => Input.Email" class="text-danger login-validation" />
            <div class="login-input-group">
                <span class="login-input-icon">
                    <svg width="18" height="18" fill="none" xmlns="http://www.w3.org/2000/svg"><rect x="3" y="7" width="12" height="8" rx="2" stroke="#b0b8d1" stroke-width="1.5"/><path d="M6 7V5a3 3 0 116 0v2" stroke="#b0b8d1" stroke-width="1.5"/></svg>
                </span>
                <InputText type="password" @bind-Value="Input.Password" class="login-input" autocomplete="current-password" aria-required="true" placeholder="Password" />
            </div>
            <ValidationMessage For="() => Input.Password" class="text-danger login-validation" />
            <div class="login-checkbox">
                <InputCheckbox @bind-Value="Input.RememberMe" />
                <label>Remember me</label>
            </div>
            <button type="submit" class="login-btn">Log in</button>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
