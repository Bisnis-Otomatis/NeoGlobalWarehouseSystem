@page "/report"

@using System.Globalization
@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager

@if(LoggedInUserRole == UserRole.Admin)
{
    <MudContainer>
        <MudPaper Class="pa-4 mt-4">
            <MudStack Spacing="2">
                <MudSelect T="string" Label="Report For" @bind-Value="SelectedReportType" Dense="true" Class="report-type-select" Style="min-width: 200px; width: 100%;"
                           Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Close" OnAdornmentClick="ClearReportType" AdornmentColor="Color.Default" AdornmentAriaLabel="Clear selection" AdornmentIconSize="Size.Medium" AdornmentIconStyle="cursor:pointer;" AdornmentIconDisabled="string.IsNullOrEmpty(SelectedReportType)">
                    <MudSelectItem Value="@("customer")">Customer</MudSelectItem>
                    <MudSelectItem Value="@("employee")">Employee</MudSelectItem>
                </MudSelect>
                <MudSelect T="int" Label="Month" @bind-Value="SelectedMonth" Class="report-type-select" Style="min-width: 200px; width: 100%;">
                    @foreach (var month in AvailableMonths)
                    {
                        <MudSelectItem Value="@month.Value">@month.Key</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="int" Label="Year" @bind-Value="SelectedYear" Class="report-type-select" Style="min-width: 200px; width: 100%;">
                    @foreach (var year in AvailableYears)
                    {
                        <MudSelectItem Value="@year">@year</MudSelectItem>
                    }
                </MudSelect>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadReport" Disabled="@(string.IsNullOrEmpty(SelectedReportType) || SelectedMonth == 0 || SelectedYear == 0)" Style="width:100%;">
                    Download PDF
                </MudButton>
            </MudStack>
        </MudPaper>
    </MudContainer>
}


@code {
    private string? SelectedReportType;
    private int SelectedMonth = 0;
    private int SelectedYear = 0;
    private Dictionary<string, int> AvailableMonths = new();
    private List<int> AvailableYears = new();

    [CascadingParameter]
    Task<AuthenticationState>? AuthStateTask { get; set; }
    UserRole? LoggedInUserRole { get; set; }

    protected override async Task OnInitializedAsync()
    {

        if (AuthStateTask != null)
        {
            var authState = await AuthStateTask;
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true)
            {
                var loggedInUser = await UserManager.GetUserAsync(user);
                if (loggedInUser != null)
                {
                    await LoadAvailableMonthsAndYears();
                    LoggedInUserRole = loggedInUser.Role;
                }
            }
        }

    }

    private async Task LoadAvailableMonthsAndYears()
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        var transactions = await db.Transactions.ToListAsync();
        var months = transactions
            .Select(x => new { x.TimeStamp.Year, x.TimeStamp.Month })
            .Distinct()
            .OrderByDescending(x => x.Year).ThenByDescending(x => x.Month)
            .ToList();
        AvailableMonths = months
            .GroupBy(x => x.Month)
            .ToDictionary(
                g => CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(g.Key),
                g => g.Key
            );
        AvailableYears = months.Select(x => x.Year).Distinct().OrderByDescending(x => x).ToList();
        if (AvailableMonths.Any())
            SelectedMonth = AvailableMonths.First().Value;
        if (AvailableYears.Any())
            SelectedYear = AvailableYears.First();
    }

    private void ClearReportType()
    {
        SelectedReportType = null;
    }

    private async Task DownloadReport()
    {
        if (string.IsNullOrEmpty(SelectedReportType) || SelectedMonth == 0 || SelectedYear == 0)
        {
            Snackbar.Add("Please select report type, month, and year", Severity.Warning);
            return;
        }
        var url = new Uri(new Uri(NavigationManager.BaseUri), $"api/report/download?type={SelectedReportType}&month={SelectedMonth}&year={SelectedYear}").ToString();
        var response = await Http.GetAsync(url);
        if (response.IsSuccessStatusCode)
        {
            var bytes = await response.Content.ReadAsByteArrayAsync();
            var fileName = $"Report_{SelectedReportType}_{SelectedYear}_{SelectedMonth}.pdf";
            await JS.InvokeVoidAsync("BlazorDownloadFile", fileName, "application/pdf", bytes);
        }
        else
        {
            Snackbar.Add("Failed to download report", Severity.Error);
        }
    }

    [Inject]
    public IJSRuntime JS { get; set; } = default!;
}
