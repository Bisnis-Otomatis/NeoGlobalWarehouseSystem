@page "/transaction"

@using System.Globalization
@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject ISnackbar Snackbar
@using TransactionData = NeoGlobalWarehouseSystem.Data.ApplicationDb.Transaction
@using NeoGlobalWarehouseSystem.Data.ApplicationDb

<MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraLarge">
    <MudTextField @bind-Value="SearchKeyword" Variant="Variant.Outlined" Class="mt-3" Label="Search Product" Immediate="true"></MudTextField>
    <MudDataGrid Items="@Transactions" class="mt-5" Dense="true" Hover="true" QuickFilter="PerformSearch">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="ID" />
            <PropertyColumn Property="x => x.IsTeacher" Title="Customer Types">
                <CellTemplate>
                    @if (context.Item.IsTeacher)
                    {
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.Person" />
                            @("Teacher") (@context.Item.TeacherName)
                        </MudStack>
                    }
                    else
                    {
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.People" />
                            @("Customer")
                            @if (context.Item.TransactionCustomerName != "")
                            {
                                {
                                    @(" (" + context.Item.TransactionCustomerName + ")")
                                }
                            }
                        </MudStack>
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.TransactionProductCount" Title="Total Products" />
            <PropertyColumn Property="x => x.TransactionProductTotalPrice" Title="Total Price" >
                <CellTemplate>
                    @if (context.Item.IsTeacher == true)
                    {
                        @("-")
                    }
                    else
                    {
                        @("Rp. " + context.Item.TransactionProductTotalPrice.ToString("N0", CultureInfo.GetCultureInfo("id-ID")))
                    } 
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.ProcessedByName" Title="Processed by">
                <CellTemplate>
                    @context.Item.ProcessedByName
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.TimeStamp" Title="Time" />
            <TemplateColumn Title="">
                <CellTemplate>
                    <MudStack Row Spacing="0">
                        <MudIconButton Size="Size.Small" Color="Color.Primary"
                                       Icon="@Icons.Material.Filled.ViewInAr"
                                       OnClick="x => OpenViewDialog(context.Item)"/> @* View Button *@
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Edit"
                                       OnClick="x => OpenEditDialog(context.Item)" /> @* Edit Button *@
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Delete"
                                       OnClick="x => OpenDeleteDialog(context.Item)" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <!-- View Dialog -->
    <MudDialog @bind-Visible="OpenDialogVisible" Options="new DialogOptions { MaxWidth = MaxWidth.Large }">
        <DialogContent>
            <MudText Typo="Typo.h6">Transaction Products</MudText>
            <MudDataGrid Items="@ViewDialogProducts" Dense="true" Class="mt-2">
                <Columns>
                    <PropertyColumn Property="x => x.Name" Title="Product Name" />
                    <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
                    @if (!TransactionToOpen.IsTeacher)
                    {
                        <PropertyColumn Property="x => x.Price" Title="Price">
                            <CellTemplate Context="ctx">
                                Rp. @ctx.Item.Price.ToString("N0", CultureInfo.GetCultureInfo("id-ID"))
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="@(x => x.Price * x.Quantity)" Title="Total Price">
                            <CellTemplate Context="ctx">
                                Rp. @( (ctx.Item.Price * ctx.Item.Quantity).ToString("N0", CultureInfo.GetCultureInfo("id-ID")) )
                            </CellTemplate>
                        </PropertyColumn>
                    }
                </Columns>
            </MudDataGrid>
            @if (!TransactionToOpen.IsTeacher)
            {
                <MudStack Row AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End" Class="mt-3">
                    <MudText Typo="Typo.h6">Total:</MudText>
                    <MudText Typo="Typo.h6">Rp. @ViewDialogProducts.Sum(x => x.Price * x.Quantity).ToString("N0", CultureInfo.GetCultureInfo("id-ID"))</MudText>
                </MudStack>
            }
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Text"
                       OnClick="() => OpenDialogVisible = false">
                Close
            </MudButton>
        </DialogActions>
    </MudDialog>

    <!-- Edit Dialog -->
    <MudDialog @bind-Visible="EditDialogVisible" Options="new DialogOptions { MaxWidth = MaxWidth.Large }">
        <DialogContent>
            <MudText Typo="Typo.h6">Edit Transaction Products</MudText>
            <MudAutocomplete T="Product" Label="Cari Produk" @bind-Value="EditProductSelected"
                             SearchFunc="@EditSearch" ToStringFunc="x => x.Name" Class="mt-3" />
            @if (EditProductSelected != null)
            {
                <MudCard Class="mt-1">
                    <MudCardContent>
                        <MudText>@EditProductSelected.Name</MudText>
                        <MudText Typo="Typo.body2">Quantity: @EditProductSelected.Quantity</MudText>
                        <MudText Typo="Typo.body2">Price: Rp. @EditProductSelected.Price.ToString("N0", CultureInfo.GetCultureInfo("id-ID"))</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudStack Row>
                            <MudNumericField Style="width:100px;" Variant="Variant.Outlined" @bind-Value="EditQuantityToOrder" Min="0" Max="@EditProductSelected.Quantity"></MudNumericField>
                            <MudButton Variant="Variant.Text" Disabled="@(EditQuantityToOrder == 0 || EditProductSelected.Quantity == 0 || EditQuantityToOrder == null || EditQuantityToOrder > EditProductSelected.Quantity)" OnClick="AddToEditCart" Color="Color.Primary" >Add to Cart</MudButton>
                        </MudStack>
                    </MudCardActions>
                </MudCard>
            }
            <MudDivider />
            <MudDataGrid Items="@EditCart" Class="mt-2" Dense="true">
                <Columns>
                    <PropertyColumn Property="x => x.Product.Name" Title="Product Name"></PropertyColumn>
                    <PropertyColumn Property="x => x.Quantity" Title="Quantity"></PropertyColumn>
                    <PropertyColumn Property="x => x.Product.Price" Title="Price">
                        <CellTemplate Context="priceContext">
                            Rp. @priceContext.Item.Product.Price.ToString("N0", CultureInfo.GetCultureInfo("id-ID"))
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="@(x => x.Product.Price * x.Quantity)" Title="Total Price">
                        <CellTemplate Context="totalPriceContext">
                            Rp. @((totalPriceContext.Item.Product.Price * totalPriceContext.Item.Quantity).ToString("N0", CultureInfo.GetCultureInfo("id-ID")))
                        </CellTemplate>
                    </PropertyColumn>
                    <TemplateColumn Title="Action">
                        <CellTemplate Context="actionContext">
                            <MudStack Row Spacing="0">
                                <MudIconButton Size="Size.Small"
                                               Icon="@Icons.Material.Filled.Edit"
                                               OnClick="@(() => OpenEditCartDialog(actionContext.Item))" />
                                <MudIconButton Size="Size.Small"
                                               Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               OnClick="@(() => OpenDeleteCartDialog(actionContext.Item))" />
                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
            <MudDialog @bind-Visible="EditCartDialogVisible" MaxWidth="MaxWidth.Small">
                <DialogContent>
                    <MudText Typo="Typo.h6">Edit Quantity for @EditCartItemToEdit?.Product.Name</MudText>
                    <MudNumericField @bind-Value="EditNewQuantity" Min="1" Max="@EditMaxEditableQuantity"
                                     Label="New Quantity" Style="width:100%;" />
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled" OnClick="UpdateEditCartItem">Update</MudButton>
                    <MudButton Variant="Variant.Text" OnClick="() => EditCartDialogVisible = false">Cancel</MudButton>
                </DialogActions>
            </MudDialog>
            <MudDialog @bind-Visible="DeleteCartDialogVisible" MaxWidth="MaxWidth.ExtraSmall">
                <TitleContent>
                    <MudText Typo="Typo.h6">Delete Product?</MudText>
                </TitleContent>
                <DialogContent>
                    Are you sure you want to remove <b>@EditCartItemToDelete?.Product.Name</b> from the cart?
                </DialogContent>
                <DialogActions>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Error"
                               OnClick="DeleteEditCartItem">
                        Delete
                    </MudButton>
                    <MudButton Variant="Variant.Text"
                               OnClick="() => DeleteCartDialogVisible = false">
                        Cancel
                    </MudButton>
                </DialogActions>
            </MudDialog>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveEditTransaction">Save</MudButton>
            <MudButton Variant="Variant.Text"
                       OnClick="() => EditDialogVisible = false">
                Cancel
            </MudButton>
        </DialogActions>
    </MudDialog>

    <MudDialog @bind-Visible="DeleteDialogVisible" MaxWidth="MaxWidth.ExtraSmall">
        <TitleContent>
            <MudText Typo="Typo.h6">Delete Teacher?</MudText>
        </TitleContent>
        <DialogContent>
            Are you sure you want to delete <b>@TransactionToDelete.Id</b>?
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Error"
                       OnClick="async () => await DeleteTransaction(TransactionToDelete.Id)">
                Delete
            </MudButton>
            <MudButton Variant="Variant.Text"
                       OnClick="() => DeleteDialogVisible = false">
                Cancel
            </MudButton>
        </DialogActions>
    </MudDialog>
</MudContainer>


@code {
    string SearchKeyword { get; set; } = string.Empty;

    bool OpenDialogVisible { get; set; }
    TransactionDTO TransactionToOpen { get; set; } = new();
    List<TransactionProduct> ViewDialogProducts { get; set; } = new();

    bool EditDialogVisible { get; set; }
    TransactionDTO TransactionToEdit { get; set; } = new();
    List<CartItem> EditCart { get; set; } = new();
    List<Product> EditProducts { get; set; } = new();
    Product? EditProductSelected { get; set; } = null;
    int? EditQuantityToOrder = null;
    CartItem? EditCartItemToEdit { get; set; }
    CartItem? EditCartItemToDelete { get; set; }
    int EditNewQuantity { get; set; }
    bool EditCartDialogVisible { get; set; } = false;
    bool DeleteCartDialogVisible { get; set; } = false;
    int EditMaxEditableQuantity => EditCartItemToEdit?.Product.Quantity ?? 1;

    bool DeleteDialogVisible { get; set; }
    TransactionDTO TransactionToDelete { get; set; } = new();

    List<TransactionDTO> Transactions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchTransactions();
    }

    public bool PerformSearch(TransactionDTO transaction)
    {
        if (SearchKeyword == "")
        {
            return true;
        }
        var searchString = $"{transaction.Id} {(transaction.IsTeacher ? "teacher" : "")} {transaction.TeacherName} {transaction.TransactionProductCount} {"Rp. " + transaction.TransactionProductTotalPrice.ToString("N0", CultureInfo.GetCultureInfo("id-ID"))} {transaction.ProcessedByName} {transaction.TimeStamp}".ToLowerInvariant();

        var searchKeywords = SearchKeyword.ToLowerInvariant().Split(" ");
        int countMatch = 0;
        foreach (var keyword in searchKeywords)
        {
            if (searchString.Contains(keyword))
            {
                countMatch++;
            }
        }
        return countMatch == searchKeywords.Length; //if all match, return product
    }

    public async Task FetchTransactions()
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        Transactions = await db.Transactions.Select(x => new TransactionDTO
                {
                    Id = x.Id,
                    TransactionCustomerName = x.CustomerName,
                    IsTeacher = (x.TeacherId != null),
                    TeacherName = x.Teacher != null ? x.Teacher.Name : string.Empty,
                    TransactionProductCount = x.TransactionProducts.Count,
                    TransactionProductTotalPrice = x.TransactionProducts.Sum(x => x.Price * x.Quantity),
                    ProcessedByName = x.ProcessedBy.Name,
                    TimeStamp = x.TimeStamp
                })
                .OrderByDescending(x => x.TimeStamp)
                .ToListAsync();
        StateHasChanged();
    }

    public class TransactionDTO
    {
        public int Id { get; set; }
        public string TransactionCustomerName { get; set; } = "";
        public bool IsTeacher { get; set; }
        public string TeacherName { get; set; } = "";
        public int TransactionProductCount { get; set; }
        public long TransactionProductTotalPrice { get; set; }
        public string ProcessedByName { get; set; } = "";
        public DateTime TimeStamp { get; set; }
    }

    public class CartItem
    {
        public Product Product = new();
        public int Quantity;
    }

    public async void OpenViewDialog(TransactionDTO transaction)
    {
        TransactionToOpen = transaction;
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        var products = await db.TransactionProducts.Where(x => x.TransactionId == transaction.Id).ToListAsync();
        ViewDialogProducts = products;
        OpenDialogVisible = true;
        StateHasChanged();
    }

    public async void OpenEditDialog(TransactionDTO transaction)
    {
        TransactionToEdit = transaction;
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        var transactionProducts = await db.TransactionProducts.Where(x => x.TransactionId == transaction.Id).ToListAsync();
        EditCart = transactionProducts.Select(tp => new CartItem { Product = db.Products.FirstOrDefault(p => p.Id == tp.ProductId) ?? new Product(), Quantity = tp.Quantity }).ToList();
        EditProducts = await db.Products.ToListAsync();
        EditProductSelected = null;
        EditQuantityToOrder = null;
        EditDialogVisible = true;
        StateHasChanged();
    }

    public async Task<IEnumerable<Product>> EditSearch(string value, CancellationToken token)
    {
        await Task.CompletedTask;
        EditQuantityToOrder = null;
        if (string.IsNullOrWhiteSpace(value)) return EditProducts;
        return EditProducts.Where(x => x.Name.ToUpper().StartsWith(value.ToUpper()));
    }

    public void AddToEditCart()
    {
        if (EditProductSelected != null && EditQuantityToOrder != null)
        {
            bool isFound = false;
            for (int i = 0; i < EditCart.Count; i++)
            {
                var cart = EditCart[i];
                if (cart.Product.Id == EditProductSelected.Id)
                {
                    cart.Quantity += EditQuantityToOrder.Value;
                    if (cart.Quantity > EditProductSelected.Quantity)
                    {
                        cart.Quantity = EditProductSelected.Quantity;
                    }
                    isFound = true;
                    break;
                }
            }
            if (!isFound)
            {
                EditCart.Add(new CartItem { Product = EditProductSelected, Quantity = EditQuantityToOrder.Value });
            }
            StateHasChanged();
        }
    }

    public void OpenEditCartDialog(CartItem item)
    {
        EditCartItemToEdit = item;
        EditNewQuantity = item.Quantity;
        EditCartDialogVisible = true;
    }

    public void OpenDeleteCartDialog(CartItem item)
    {
        EditCartItemToDelete = item;
        DeleteCartDialogVisible = true;
    }

    public void UpdateEditCartItem()
    {
        if (EditCartItemToEdit != null)
        {
            EditCartItemToEdit.Quantity = Math.Min(EditNewQuantity, EditCartItemToEdit.Product.Quantity);
        }
        EditCartDialogVisible = false;
    }

    public void DeleteEditCartItem()
    {
        if (EditCartItemToDelete != null)
        {
            EditCart.Remove(EditCartItemToDelete);
        }
        DeleteCartDialogVisible = false;
    }

    public async void SaveEditTransaction()
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        // Hapus produk lama
        var oldProducts = db.TransactionProducts.Where(x => x.TransactionId == TransactionToEdit.Id);
        db.TransactionProducts.RemoveRange(oldProducts);
        // Tambahkan produk baru
        foreach (var cart in EditCart)
        {
            db.TransactionProducts.Add(new TransactionProduct
            {
                TransactionId = TransactionToEdit.Id,
                ProductId = cart.Product.Id,
                Name = cart.Product.Name,
                Barcode = cart.Product.Barcode,
                Price = cart.Product.Price,
                Quantity = cart.Quantity
            });
        }
        await db.SaveChangesAsync();
        Snackbar.Add("Transaction updated successfully", Severity.Success);
        EditDialogVisible = false;
        await FetchTransactions();
    }

    public void OpenDeleteDialog(TransactionDTO transaction)
    {
        TransactionToDelete = transaction;
        DeleteDialogVisible = true;
    }

    public async Task DeleteTransaction(int id)
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        await db.TransactionProducts.Where(t => t.TransactionId == id).ExecuteDeleteAsync();
        await db.Transactions.Where(t => t.Id == id).ExecuteDeleteAsync();

        DeleteDialogVisible = false;
        Snackbar.Add("Transaction has been successfully deleted", Severity.Success);
        await FetchTransactions();
    }
}
