@page "/transaction"

@using System.Globalization
@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject ISnackbar Snackbar
@using TransactionData = NeoGlobalWarehouseSystem.Data.ApplicationDb.Transaction

<MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraLarge">
    <MudTextField @bind-Value="SearchKeyword" Variant="Variant.Outlined" Class="mt-3" Label="Search Product" Immediate="true"></MudTextField>
    <MudSwitch @bind-Value="IsShorterTable" Label="Show in detail" Color="Color.Primary" />
    <MudDataGrid Items="@Transactions" class="mt-5" Dense="true" Hover="true" QuickFilter="PerformSearch">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="ID" />
            <PropertyColumn Property="x => x.IsTeacher" Title="Customer Types">
                <CellTemplate>
                    @if (context.Item.IsTeacher)
                    {
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.Person" />
                            @("Teacher") (@context.Item.TeacherName)
                        </MudStack>
                    }
                    else
                    {
                        <MudStack Row AlignItems="AlignItems.Center" Spacing="1">
                            <MudIcon Icon="@Icons.Material.Filled.People" />
                            @("Customer")
                            @if (context.Item.TransactionCustomerName != "")
                            {
                                {
                                    @(" (" + context.Item.TransactionCustomerName + ")")
                                }
                            }
                        </MudStack>
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.TransactionProductCount" Title="Total Products" />
            <PropertyColumn Property="x => x.TransactionProductTotalPrice" Title="Total Price" >
                <CellTemplate>
                    @if (context.Item.IsTeacher == true)
                    {
                        @("-")
                    }
                    else
                    {
                        @("Rp. " + context.Item.TransactionProductTotalPrice.ToString("N0", CultureInfo.GetCultureInfo("id-ID")))
                    } 
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.ProcessedByName" Title="Processed by"/>
            <PropertyColumn Property="x => x.TimeStamp" Title="Time" />
            <TemplateColumn Title="">
                <CellTemplate>
                    <MudStack Row Spacing="0">
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.ViewInAr"
                                       OnClick="x => OpenViewDialog(context.Item)"/>
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Edit"
                                        />
                        <MudIconButton Size="Size.Small"
                                       Icon="@Icons.Material.Filled.Delete"
                                       Color="Color.Error"
                                       OnClick="x => OpenDeleteDialog(context.Item)" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudDialog @bind-Visible="OpenDialogVisible" MaxWidth="MaxWidth.Small">
        <DialogContent>
            
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Text"
                       OnClick="() => OpenDialogVisible = false">
                Cancel
            </MudButton>
        </DialogActions>
    </MudDialog>

    <MudDialog @bind-Visible="EditDialogVisible" MaxWidth="MaxWidth.Small">
        <DialogContent>
    @*         <TeacherEditor Teacher="TeacherToEdit"
                           ButtonName="Update Teacher"
                           ProcessedTeacher="UpdateTeacher" /> *@
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Text"
                       OnClick="() => EditDialogVisible = false">
                Cancel
            </MudButton>
        </DialogActions>
    </MudDialog>

    <MudDialog @bind-Visible="DeleteDialogVisible" MaxWidth="MaxWidth.ExtraSmall">
        <TitleContent>
            <MudText Typo="Typo.h6">Delete Teacher?</MudText>
        </TitleContent>
        <DialogContent>
            Are you sure you want to delete <b>@TransactionToDelete.Id</b>?
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Error"
                       OnClick="async () => await DeleteTransaction(TransactionToDelete.Id)">
                Delete
            </MudButton>
            <MudButton Variant="Variant.Text"
                       OnClick="() => DeleteDialogVisible = false">
                Cancel
            </MudButton>
        </DialogActions>
    </MudDialog>
</MudContainer>


@code {
    bool IsShorterTable { get; set; } = false;

    string SearchKeyword { get; set; } = string.Empty;

    bool OpenDialogVisible { get; set; }
    TransactionDTO TransactionToOpen { get; set; } = new();
    List<TransactionProduct> TransactionProducts { get; set; } = new();

    bool EditDialogVisible { get; set; }
    TransactionDTO TransactionToEdit { get; set; } = new();

    bool DeleteDialogVisible { get; set; }
    TransactionDTO TransactionToDelete { get; set; } = new();

    List<TransactionDTO> Transactions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchTransactions();
    }

    public bool PerformSearch(TransactionDTO transaction)
    {
        if (SearchKeyword == "")
        {
            return true;
        }
        var searchString = $"{transaction.Id} {(transaction.IsTeacher ? "teacher" : "")} {transaction.TeacherName} {transaction.TransactionProductCount} {"Rp. " + transaction.TransactionProductTotalPrice.ToString("N0", CultureInfo.GetCultureInfo("id-ID"))} {transaction.ProcessedByName} {transaction.TimeStamp}".ToLowerInvariant();

        var searchKeywords = SearchKeyword.ToLowerInvariant().Split(" ");
        int countMatch = 0;
        foreach (var keyword in searchKeywords)
        {
            if (searchString.Contains(keyword))
            {
                countMatch++;
            }
        }
        return countMatch == searchKeywords.Length; //if all match, return product
    }

    public async Task FetchTransactions()
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        Transactions = await db.Transactions.Select(x => new TransactionDTO
                {
                    Id = x.Id,
                    TransactionCustomerName = x.CustomerName,
                    IsTeacher = (x.TeacherId != null),
                    TeacherName = x.Teacher != null ? x.Teacher.Name : string.Empty,
                    TransactionProductCount = x.TransactionProducts.Count,
                    TransactionProductTotalPrice = x.TransactionProducts.Sum(x => x.Price * x.Quantity),
                    ProcessedByName = x.ProcessedBy.Name,
                    TimeStamp = x.TimeStamp
                })
                .OrderByDescending(x => x.TimeStamp)
                .ToListAsync();
        StateHasChanged();
    }

    public class TransactionDTO
    {
        public int Id { get; set; }
        public string TransactionCustomerName { get; set; } = "";
        public bool IsTeacher { get; set; }
        public string TeacherName { get; set; } = "";
        public int TransactionProductCount { get; set; }
        public long TransactionProductTotalPrice { get; set; }
        public string ProcessedByName { get; set; } = "";
        public DateTime TimeStamp { get; set; }
    }

    public void OpenViewDialog(TransactionDTO transaction)
    {
        
    }

    public void OpenDeleteDialog(TransactionDTO transaction)
    {
        TransactionToDelete = transaction;
        DeleteDialogVisible = true;
    }

    public async Task DeleteTransaction(int id)
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        await db.TransactionProducts.Where(t => t.TransactionId == id).ExecuteDeleteAsync();
        await db.Transactions.Where(t => t.Id == id).ExecuteDeleteAsync();

        DeleteDialogVisible = false;
        Snackbar.Add("Transaction has been successfully deleted", Severity.Success);
        await FetchTransactions();
    }
}
