@using System.Globalization
@using NeoGlobalWarehouseSystem.Data.ApplicationDb
@using System.Collections.Generic

<MudPaper Class="pa-5 ma-1" Elevation="3">
    <MudStack Spacing="3">
        <MudTextField @bind-Value="Name" Label="Product Name"></MudTextField>
        <MudNumericField @bind-Value="Quantity" Label="Quantity" Min="0"></MudNumericField>
        <MudNumericField @bind-Value="Price" Label="Price" Adornment="Adornment.Start" AdornmentText="Rp." Format="N0" Culture="CultureInfo" Min="0" Max="100000000" HideSpinButtons="true"></MudNumericField>
        <MudTextField @bind-Value="Barcode" Label="Barcode"></MudTextField>

        <MudStack Row AlignItems="AlignItems.Center">
            <MudText>For: </MudText>
            <MudCheckBox @bind-Value="CanBeBoughtByStudents" Label="Students"></MudCheckBox>
            <MudCheckBox @bind-Value="CanBeBoughtByEmployees" Label="Employees"></MudCheckBox>
            @if (CanBeBoughtByEmployees)
            {
                <MudSelect T="EmployeeType" SelectedValues="SelectedEmployeeTypes" SelectedValuesChanged="x => SelectedEmployeeTypes = x.Distinct().ToList()" MultiSelection="true" Label="Employee Types">
                    @foreach (var type in Enum.GetValues<EmployeeType>())
                    {
                        if (type != EmployeeType.None)
                        {
                            <MudSelectItem Value="@type">@SplitPascalCase(type.ToString())</MudSelectItem>
                        }
                    }
                </MudSelect>
            }
        </MudStack>
        
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ReturnProduct">@ButtonName</MudButton>
    </MudStack>
</MudPaper>

@code {
    CultureInfo CultureInfo = new("id-ID", false);
    public string Name = string.Empty;
    public int? Quantity;
    public string Barcode = string.Empty;
    public long? Price;
    public bool CanBeBoughtByStudents;
    public bool CanBeBoughtByEmployees;
    public List<EmployeeType> SelectedEmployeeTypes = new();

    [Parameter]
    public NeoGlobalWarehouseSystem.Data.ApplicationDb.Product? Product { get; set; }

    [Parameter]
    public string ButtonName { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<NeoGlobalWarehouseSystem.Data.ApplicationDb.Product> ProcessedProduct { get; set; }

    protected override void OnInitialized()
    {
        if (Product == null)
        {
            Product = new NeoGlobalWarehouseSystem.Data.ApplicationDb.Product();
        }
        else
        {
            Name = Product.Name;
            Quantity = Product.Quantity == 0 ? null : Product.Quantity;
            Barcode = Product.Barcode;
            Price = Product.Price == 0 ? null : Product.Price;
            CanBeBoughtByStudents = Product.CanBeBoughtByStudents;
            CanBeBoughtByEmployees = Product.CanBeBoughtByEmployeeTypes != null && Product.CanBeBoughtByEmployeeTypes.Count > 0;
            SelectedEmployeeTypes = Product.CanBeBoughtByEmployeeTypes != null ? new List<EmployeeType>(Product.CanBeBoughtByEmployeeTypes) : new();
        }
    }

    string SplitPascalCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return input;
        var result = new System.Text.StringBuilder();
        for (int i = 0; i < input.Length; i++)
        {
            if (i > 0 && char.IsUpper(input[i]) && !char.IsWhiteSpace(input[i - 1]))
                result.Append(' ');
            result.Append(input[i]);
        }
        return result.ToString();
    }

    public async Task ReturnProduct()
    {
        if (Product != null)
        {
            Product.Name = Name;
            Product.Quantity = (Quantity == null) ? 0 : Quantity.Value;
            Product.Price = (Price == null) ? 0 : Price.Value;
            Product.Barcode = Barcode;
            Product.CanBeBoughtByStudents = CanBeBoughtByStudents;
            Product.CanBeBoughtByEmployeeTypes = CanBeBoughtByEmployees ? SelectedEmployeeTypes : new List<EmployeeType>();

            await ProcessedProduct.InvokeAsync(Product);
        }
        ResetFields();
    }

    public void ResetFields()
    {
        Product = new NeoGlobalWarehouseSystem.Data.ApplicationDb.Product();
        Name = string.Empty;
        Quantity = null;
        Barcode = string.Empty;
        Price = null;
        CanBeBoughtByStudents = false;
        CanBeBoughtByEmployees = false;
        SelectedEmployeeTypes.Clear();
    }
}
