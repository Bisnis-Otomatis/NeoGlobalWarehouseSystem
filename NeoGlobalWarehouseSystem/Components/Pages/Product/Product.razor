@page "/product"
@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject ISnackbar Snackbar

<PageTitle>Product</PageTitle>

<MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraLarge">
    <MudStack Row Justify="Justify.SpaceBetween">
        @if (NewProductExpanded)
        {
            <div></div>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward" OnClick="() => NewProductExpanded = !NewProductExpanded" Color="Color.Primary" Size="Size.Medium" Disabled="NewProductExpanded == false" />
        }
        else
        {
            <MudButton StartIcon="@Icons.Material.Filled.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="() => NewProductExpanded = !NewProductExpanded" Disabled="NewProductExpanded == true">New Product</MudButton>
        }
    </MudStack>
    <MudCollapse Expanded="NewProductExpanded" Class="py-2">
        <ProductEditor ButtonName="Add Product" ProcessedProduct="AddProduct" />
    </MudCollapse>
    <ProductsList @ref="ProductsList" />
</MudContainer>

@code {
    bool NewProductExpanded = false;
    ProductsList ProductsList = new();

    public async Task AddProduct(Data.ApplicationDb.Product product)
    {
        // 1) Create a fresh DbContext
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();

        // 2) Add the product; its Id will be generated by the database
        await db.Products.AddAsync(product);
        await db.SaveChangesAsync();
        // At this point, product.Id has been set

        // 3) If there’s an initial stock, log it
        if (product.Quantity > 0)
        {
            var inputLog = new ProductInputLog
            {
                ProductId = product.Id,
                QuantityInput = product.Quantity,
                // Timestamp will default to UtcNow if you like,
                // or you can set it explicitly here:
                // Timestamp = DateTime.UtcNow
            };

            await db.ProductInputLogs.AddAsync(inputLog);
            await db.SaveChangesAsync();
        }

        // 4) UI state updates
        NewProductExpanded = false;
        Snackbar.Add("Product has been successfully added", Severity.Success);

        // 5) Refresh your list
        await ProductsList.FetchProducts();
    }
}
