@using System.Globalization
@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject ISnackbar Snackbar

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager

<MudTextField @bind-Value="SearchKeyword" Variant="Variant.Outlined" Class="mt-3" Label="Search Product" Immediate="true"></MudTextField>

<MudSwitch @bind-Value="IsShorterTable" Label="Show in detail" Color="Color.Primary" />

<MudDataGrid Items="@Products" Dense="true" Filterable="true" Hover="true" QuickFilter="PerformSearch">
    <Columns>
        <PropertyColumn Property="x => x.Product.Id" Title="ID" />
        <PropertyColumn Property="x => x.Product.Name" Title="Name" />
        <PropertyColumn Property="x => x.Product.Barcode" Title="Barcode" />
        <PropertyColumn Property="x => x.Product.Quantity" Title="Quantity" />
        <PropertyColumn Property="x => x.Product.Price" Title="Price">
            <CellTemplate>
                Rp. @context.Item.Product.Price.ToString("N0", CultureInfo.GetCultureInfo("id-ID"))
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Product.CanBeBoughtByStudents" Title="Students">
            <CellTemplate>
                @if (context.Item.Product.CanBeBoughtByStudents)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Product.CanBeBoughtByEmployeeTypes" Title="Employee Types">
    <CellTemplate>
        @if (context.Item.Product.CanBeBoughtByEmployeeTypes != null && context.Item.Product.CanBeBoughtByEmployeeTypes.Count > 0)
        {
            @string.Join(", ", context.Item.Product.CanBeBoughtByEmployeeTypes.Select(e => e.ToString()))
        }
        else
        {
            <span>-</span>
        }
    </CellTemplate>
</PropertyColumn>

        @if (IsShorterTable)
        {
            <PropertyColumn Property="x => x.LastProductInputDateTime" Title="Product Input">
                <CellTemplate>
                    @if (context.Item.LastProductInputDateTime == default(DateTime))
                    {
                        @("-")
                    }
                    else
                    {
                        @context.Item.LastProductInputDateTime
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="x => x.LastTransactionDateTime" Title="Last Tx">
                <CellTemplate>
                    @if (context.Item.LastTransactionDateTime == default(DateTime))
                    {
                        @("-")
                    }
                    else
                    {
                        @context.Item.LastTransactionDateTime
                    }
                </CellTemplate>
            </PropertyColumn>
        }
        @if(LoggedInUserRole == UserRole.Admin)
        {
            <TemplateColumn Title="Action">
                <CellTemplate>
                    <MudStack Row Spacing="0">
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="x => OpenUpdateDialog(context.Item.Product)" />
                        <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="x => OpenDeleteDialog(context.Item.Product)" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        }
    </Columns>
</MudDataGrid>

<MudDialog @bind-Visible="EditDialogIsVisible" Options="_dialogOptions">
    <DialogContent>
        <ProductEditor Product="ProductSentToEditDialog" ButtonName="Edit Product" ProcessedProduct="UpdateProductCallback" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="() => EditDialogIsVisible = false" Class="px-10">Cancel</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="DeleteDialogIsVisible" Options="_dialogOptions">
    <TitleContent>
        <MudText Typo="Typo.h6">Delete Product?</MudText>
    </TitleContent>
    <DialogContent>
        This action will delete a product: @ProductSentToDeleteDialog.Name (ID: @ProductSentToDeleteDialog.Id). Continue?
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="async x => await DeleteProduct(ProductSentToDeleteDialog.Id)" Class="px-10">Delete</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Dark" OnClick="() => DeleteDialogIsVisible = false" Class="px-10">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    bool IsShorterTable { get; set; } = false;

    string SearchKeyword { get; set; } = string.Empty;
    List<ProductDTO> Products { get; set; } = new();

    bool EditDialogIsVisible { get; set; } = false;
    NeoGlobalWarehouseSystem.Data.ApplicationDb.Product ProductSentToEditDialog { get; set; } = new();

    bool DeleteDialogIsVisible { get; set; } = false;
    NeoGlobalWarehouseSystem.Data.ApplicationDb.Product ProductSentToDeleteDialog { get; set; } = new();

    DialogOptions _dialogOptions = new() { FullWidth = true };

    [CascadingParameter]
    Task<AuthenticationState>? AuthStateTask { get; set; }
    UserRole? LoggedInUserRole { get; set; }


    public bool PerformSearch(ProductDTO productDTO)
    {
        if (SearchKeyword == "")
        {
            return true;
        }
        var searchString = $"{productDTO.Product.Id}{productDTO.Product.Name} {productDTO.Product.Barcode} {productDTO.Product.Quantity} \"Rp. \" + {productDTO.Product.Price.ToString("N0", CultureInfo.GetCultureInfo("id-ID"))} {(productDTO.Product.CanBeBoughtByStudents ? "student" : "")} {string.Join(",", productDTO.Product.CanBeBoughtByEmployeeTypes)} {productDTO.LastProductInputDateTime} {productDTO.LastTransactionDateTime}".ToLowerInvariant();

        var searchKeywords = SearchKeyword.ToLowerInvariant().Split(" ");
        int countMatch = 0;
        foreach (var keyword in searchKeywords)
        {
            if (searchString.Contains(keyword))
            {
                countMatch++;
            }
        }
        return countMatch == searchKeywords.Length; //if all match, return product
    }

    public void OpenUpdateDialog(NeoGlobalWarehouseSystem.Data.ApplicationDb.Product product)
    {
        if (LoggedInUserRole != UserRole.Admin)
        {
            Snackbar.Add("You do not have permission to edit this product.", Severity.Error);
            return;
        }
        EditDialogIsVisible = true;
        ProductSentToEditDialog = product;
    }

    public EventCallback<NeoGlobalWarehouseSystem.Data.ApplicationDb.Product> UpdateProductCallback => EventCallback.Factory.Create<NeoGlobalWarehouseSystem.Data.ApplicationDb.Product>(this, UpdateProduct);

    public async Task UpdateProduct(NeoGlobalWarehouseSystem.Data.ApplicationDb.Product product)
    {
        if (LoggedInUserRole != UserRole.Admin)
        {
            Snackbar.Add("You do not have permission to edit this product.", Severity.Error);
            return;
        }
        await using var applicationDbContext = await ApplicationDbContextFactory.CreateDbContextAsync();

        await applicationDbContext.Products.Where(x => x.Id == product.Id).ExecuteUpdateAsync(setter => setter
                .SetProperty(x => x.Name, product.Name)
                .SetProperty(x => x.Quantity, product.Quantity)
                .SetProperty(x => x.Barcode, product.Barcode)
                .SetProperty(x => x.Price, product.Price)
                .SetProperty(x => x.CanBeBoughtByStudents, product.CanBeBoughtByStudents)
                .SetProperty(x => x.CanBeBoughtByEmployeeTypes, product.CanBeBoughtByEmployeeTypes)
            );

        await FetchProducts(); // Refresh list setelah update

        EditDialogIsVisible = false;
        Snackbar.Add("Product has been succesfully updated", Severity.Success);
    }

    public void OpenDeleteDialog(NeoGlobalWarehouseSystem.Data.ApplicationDb.Product product)
    {
        if (LoggedInUserRole != UserRole.Admin)
        {
            Snackbar.Add("You do not have permission to delete this product.", Severity.Error);
            return;
        }
        DeleteDialogIsVisible = true;
        ProductSentToDeleteDialog = product;
    }

    public async Task DeleteProduct(int Id)
    {
        if (LoggedInUserRole != UserRole.Admin)
        {
            Snackbar.Add("You do not have permission to delete this product.", Severity.Error);
            return;
        }
        await using var applicationDbContext = await ApplicationDbContextFactory.CreateDbContextAsync();
        await applicationDbContext.Products.Where(x => x.Id == Id).ExecuteDeleteAsync();

        await FetchProducts();

        DeleteDialogIsVisible = false;
        Snackbar.Add("Product has been succesfully deleted", Severity.Success);
    }

    public async Task FetchProducts()
    {
        await using var applicationDbContext = await ApplicationDbContextFactory.CreateDbContextAsync();
        Products = await applicationDbContext.Products.Select(x => new ProductDTO()
        {
            Product = x,
            LastProductInputDateTime = x.ProductInputLog.OrderByDescending(x => x.Timestamp).Select(x => x.Timestamp).FirstOrDefault(),
            LastTransactionDateTime = x.TransactionProducts.Where(x => x.ProductId == x.Id).Select(x => x.Transaction.TimeStamp).OrderByDescending(x => x).FirstOrDefault()
        }).ToListAsync();

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthStateTask != null)
        {
            var authState = await AuthStateTask;
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true)
            {
                var loggedInUser = await UserManager.GetUserAsync(user);
                if (loggedInUser != null)
                {
                    await FetchProducts();
                    LoggedInUserRole = loggedInUser.Role;
                }
            }
        }
    }

    public class ProductDTO
    {
        public required NeoGlobalWarehouseSystem.Data.ApplicationDb.Product Product { get; set; }
        public required DateTime LastProductInputDateTime { get; set; }
        public required DateTime LastTransactionDateTime { get; set; }
    }
}