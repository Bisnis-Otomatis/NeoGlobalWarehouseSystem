@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject IDialogService DialogService 

<MudTextField @bind-Value="SearchKeyword" Variant="Variant.Outlined" Class="mt-3" Label="Search Product"></MudTextField>

<MudDataGrid Items="@Products" Filterable="true">
    <Columns>
        <PropertyColumn Property="x => x.Product.Id" Title="ID" />
        <PropertyColumn Property="x => x.Product.Name" Title="Name" />
        <PropertyColumn Property="x => x.Product.Barcode" Title="Barcode" />
        <PropertyColumn Property="x => x.Product.Quantity" Title="Quantity" />
        <PropertyColumn Property="x => x.Product.CanBeBoughtByStudents"
            Title="Student">
            <CellTemplate>
                @if(context.Item.Product.CanBeBoughtByStudents == true)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                }
            </CellTemplate>
            </PropertyColumn>
        <PropertyColumn Property="x => x.Product.CanBeBoughtByTeachers" Title="Teachers">
            <CellTemplate>
                @if(context.Item.Product.CanBeBoughtByTeachers == true)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Check"></MudIcon>
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.LastProductInputDateTime" Title="Product Input" >
            <CellTemplate>
                @if (context.Item.LastProductInputDateTime == default(DateTime))
                {
                    @("-")
                }
                else
                {
                    @context.Item.LastProductInputDateTime
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.LastTransactionDateTime" Title="Last Tx">
            <CellTemplate>
                @if (context.Item.LastTransactionDateTime == default(DateTime))
                {
                    @("-")
                }
                else
                {
                    @context.Item.LastTransactionDateTime
                }
            </CellTemplate>
        </PropertyColumn>
        <TemplateColumn Title="Action">
            <CellTemplate>
                <MudStack Row Spacing="0">
                    <MudIconButton Size="Size.Small"  Icon="@Icons.Material.Filled.Edit" OnClick="EditProduct"/>
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="x => DeleteProduct(context.Item.Product.Id)" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    string SearchKeyword { get; set; } = string.Empty;
    List<ProductDTO> Products { get; set; } = new();

    public async Task EditProduct()
    {

    }

    public async Task DeleteProduct(int Id)
    {
        await using var applicationDbContext = await ApplicationDbContextFactory.CreateDbContextAsync();
        await applicationDbContext.Products.Where(x => x.Id == Id).ExecuteDeleteAsync();

        await FetchProducts();
    }

    public async Task FetchProducts()
    {
        await using var applicationDbContext = await ApplicationDbContextFactory.CreateDbContextAsync();
        Products = await applicationDbContext.Products.Select(x => new ProductDTO()
        {
            Product = x,
            LastProductInputDateTime = x.ProductInputLog.OrderByDescending(x => x.Timestamp).Select(x => x.Timestamp).FirstOrDefault(),
            LastTransactionDateTime = x.TransactionProducts.Where(x => x.ProductId == x.Id).Select(x => x.Transaction.TimeStamp).OrderByDescending(x => x).FirstOrDefault()
        }).ToListAsync();

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchProducts();
    }

    public class ProductDTO
    {
        public required Data.ApplicationDb.Product Product { get; set; }
        public required DateTime LastProductInputDateTime { get; set; }
        public required DateTime LastTransactionDateTime { get; set; }
    }
}