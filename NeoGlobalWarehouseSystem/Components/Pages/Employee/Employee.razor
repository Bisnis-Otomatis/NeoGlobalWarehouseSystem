@page "/employee"
@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject ISnackbar Snackbar

<PageTitle>Employee</PageTitle>

<MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraLarge">
    <MudStack Row Justify="Justify.SpaceBetween">
        @if (NewEmployeeExpanded)
        {
            <div></div>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                           OnClick="() => NewEmployeeExpanded = !NewEmployeeExpanded"
                           Color="Color.Primary" Size="Size.Medium" />
        }
        else
        {
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="() => NewEmployeeExpanded = !NewEmployeeExpanded">
                New Employee
            </MudButton>
        }
    </MudStack>

    <MudCollapse Expanded="NewEmployeeExpanded" Class="py-2">
        <EmployeeEditor ButtonName="Add Employee"
                       ProcessedEmployee="AddEmployee" />
    </MudCollapse>

    <EmployeeList @ref="EmployeesList" />
</MudContainer>

@code {
    bool NewEmployeeExpanded = false;
    EmployeeList EmployeesList = new();

    public async Task AddEmployee(Data.ApplicationDb.Employee employee)
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        await db.Employees.AddAsync(employee);
        await db.SaveChangesAsync();

        NewEmployeeExpanded = false;
        Snackbar.Add("Employee has been successfully added", Severity.Success);

        await EmployeesList.FetchEmployees();
    }
}
