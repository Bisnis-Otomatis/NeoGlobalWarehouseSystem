@using System.Globalization
@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject ISnackbar Snackbar

<MudTextField @bind-Value="SearchKeyword"
              Variant="Variant.Outlined"
              Class="mt-3"
              Label="Search Employee"
              Immediate="true" />

<MudDataGrid Items="@Employees"
             Dense="true"
             Hover="true"
             QuickFilter="PerformSearch">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="ID" />
        <PropertyColumn Property="x => x.Name" Title="Name" />

        <TemplateColumn Title="Action">
            <CellTemplate>
                <MudStack Row Spacing="0">
                    <MudIconButton Size="Size.Small"
                                   Icon="@Icons.Material.Filled.Edit"
                                   OnClick="x => OpenEditDialog(context.Item)" />
                    <MudIconButton Size="Size.Small"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Color="Color.Error"
                                   OnClick="x => OpenDeleteDialog(context.Item)" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudDialog @bind-Visible="EditDialogVisible" MaxWidth="MaxWidth.Small">
    <DialogContent>
        <EmployeeEditor Employee="EmployeeToEdit"
                       ButtonName="Update Employee"
                       ProcessedEmployee="UpdateEmployee" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text"
                   OnClick="() => EditDialogVisible = false">
            Cancel
        </MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-Visible="DeleteDialogVisible" MaxWidth="MaxWidth.ExtraSmall">
    <TitleContent>
        <MudText Typo="Typo.h6">Delete Employee?</MudText>
    </TitleContent>
    <DialogContent>
        Are you sure you want to delete <b>@EmployeeToDelete.Name</b> (ID: @EmployeeToDelete.Id)?
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Error"
                   OnClick="async () => await DeleteEmployee(EmployeeToDelete.Id)">
            Delete
        </MudButton>
        <MudButton Variant="Variant.Text"
                   OnClick="() => DeleteDialogVisible = false">
            Cancel
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    string SearchKeyword { get; set; } = string.Empty;
    List<Data.ApplicationDb.Employee> Employees { get; set; } = new();

    bool EditDialogVisible { get; set; }
    Data.ApplicationDb.Employee EmployeeToEdit { get; set; } = new();

    bool DeleteDialogVisible { get; set; }
    Data.ApplicationDb.Employee EmployeeToDelete { get; set; } = new();

    public bool PerformSearch(Data.ApplicationDb.Employee employee)
    {
        if (string.IsNullOrWhiteSpace(SearchKeyword))
            return true;

        return employee.Name.Contains(SearchKeyword, StringComparison.InvariantCultureIgnoreCase);
    }

    public void OpenEditDialog(Data.ApplicationDb.Employee employee)
    {
        EmployeeToEdit = employee;
        EditDialogVisible = true;
    }

    public async Task UpdateEmployee(Data.ApplicationDb.Employee employee)
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        await db.Employees
                .Where(t => t.Id == employee.Id)
                .ExecuteUpdateAsync(s => s.SetProperty(t => t.Name, employee.Name));

        EditDialogVisible = false;
        Snackbar.Add("Employee has been successfully updated", Severity.Success);
        await FetchEmployees();
    }

    public void OpenDeleteDialog(Data.ApplicationDb.Employee employee)
    {
        EmployeeToDelete = employee;
        DeleteDialogVisible = true;
    }

    public async Task DeleteEmployee(int id)
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        await db.Employees.Where(t => t.Id == id).ExecuteDeleteAsync();

        DeleteDialogVisible = false;
        Snackbar.Add("Employee has been successfully deleted", Severity.Success);
        await FetchEmployees();
    }

    public async Task FetchEmployees()
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        Employees = await db.Employees.OrderBy(t => t.Name).ToListAsync();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchEmployees();
    }
}
