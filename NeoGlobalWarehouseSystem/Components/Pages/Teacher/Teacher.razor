@page "/teacher"
@inject IDbContextFactory<ApplicationDbContext> ApplicationDbContextFactory
@inject ISnackbar Snackbar

<PageTitle>Teacher</PageTitle>

<MudContainer Class="mt-5" MaxWidth="MaxWidth.ExtraLarge">
    <MudStack Row Justify="Justify.SpaceBetween">
        @if (NewTeacherExpanded)
        {
            <div></div>
            <MudIconButton Icon="@Icons.Material.Filled.ArrowUpward"
                           OnClick="() => NewTeacherExpanded = !NewTeacherExpanded"
                           Color="Color.Primary" Size="Size.Medium" />
        }
        else
        {
            <MudButton StartIcon="@Icons.Material.Filled.Add"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="() => NewTeacherExpanded = !NewTeacherExpanded">
                New Teacher
            </MudButton>
        }
    </MudStack>

    <MudCollapse Expanded="NewTeacherExpanded" Class="py-2">
        <TeacherEditor ButtonName="Add Teacher"
                       ProcessedTeacher="AddTeacher" />
    </MudCollapse>

    <TeacherList @ref="TeachersList" />
</MudContainer>

@code {
    bool NewTeacherExpanded = false;
    TeacherList TeachersList = new();

    public async Task AddTeacher(Data.ApplicationDb.Employee teacher)
    {
        await using var db = await ApplicationDbContextFactory.CreateDbContextAsync();
        await db.Teachers.AddAsync(teacher);
        await db.SaveChangesAsync();

        NewTeacherExpanded = false;
        Snackbar.Add("Teacher has been successfully added", Severity.Success);

        await TeachersList.FetchTeachers();
    }
}
