<MudPaper Class="pa-5 ma-1" Elevation="3">
    <MudStack Spacing="3">
        <MudTextField @bind-Value="Name" Label="Employee Name" Required="true" />
        <MudSelect T="Data.ApplicationDb.EmployeeType" @bind-Value="Type" Label="Employee Type" Required="true">
            @foreach (var type in Enum.GetValues<Data.ApplicationDb.EmployeeType>())
            {
                if (type != Data.ApplicationDb.EmployeeType.None)
                {
                    <MudSelectItem Value="@type">@SplitPascalCase(type.ToString())</MudSelectItem>
                }
            }
        </MudSelect>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="ReturnEmployee">
            @ButtonName
        </MudButton>
    </MudStack>
</MudPaper>

@code {
    public string Name { get; set; } = string.Empty;
    public Data.ApplicationDb.EmployeeType Type { get; set; } = Data.ApplicationDb.EmployeeType.None;

    [Parameter]
    public Data.ApplicationDb.Employee? Employee { get; set; }

    [Parameter]
    public string ButtonName { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<Data.ApplicationDb.Employee> ProcessedEmployee { get; set; }

    protected override void OnInitialized()
    {
        if (Employee == null)
            Employee = new();
        else
        {
            Name = Employee.Name;
            Type = Employee.Type;
        }
    }

    public async Task ReturnEmployee()
    {
        if (Employee is null)
            return;

        Employee.Name = Name.Trim();
        Employee.Type = Type;
        await ProcessedEmployee.InvokeAsync(Employee);

        ResetFields();
    }

    void ResetFields()
    {
        Employee = new();
        Name = string.Empty;
        Type = Data.ApplicationDb.EmployeeType.None;
    }

    string SplitPascalCase(string input)
    {
        if (string.IsNullOrWhiteSpace(input)) return input;
        var result = new System.Text.StringBuilder();
        for (int i = 0; i < input.Length; i++)
        {
            if (i > 0 && char.IsUpper(input[i]) && !char.IsWhiteSpace(input[i - 1]))
                result.Append(' ');
            result.Append(input[i]);
        }
        return result.ToString();
    }
}
